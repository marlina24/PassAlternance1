{"ast":null,"code":"const express = require(\"express\");\nconst dotenv = require(\"dotenv\");\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst nodemailer = require(\"nodemailer\");\nconst db = require(\"./config/database\");\ndotenv.config();\nconsole.log(\"📌 EMAIL chargé :\", process.env.EMAIL ? \"✅\" : \"❌ Non défini\");\nconsole.log(\"📌 PASSWORD chargé :\", process.env.PASSWORD ? \"✅\" : \"❌ Non défini\");\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// 🔍 Middleware de debug pour logguer toutes les requêtes reçues\napp.use((req, res, next) => {\n  console.log(`📩 Requête reçue: ${req.method} ${req.url} - Body:`, req.body);\n  next();\n});\n\n// Routes API\napp.use(\"/api/offers\", require(\"./routes/offers\"));\napp.use(\"/api/users\", require(\"./routes/users\"));\napp.use(\"/api/experiences\", require(\"./routes/experiences\"));\napp.use(\"/api/favorites\", require(\"./routes/favorites\"));\napp.use(\"/api/profile\", require(\"./routes/profile\"));\n\n// 📧 Route pour envoyer un email\napp.post(\"/api/contact\", async (req, res) => {\n  const {\n    firstName,\n    lastName,\n    email,\n    message\n  } = req.body;\n\n  // Vérification des données reçues\n  if (!firstName || !lastName || !email || !message) {\n    console.log(\"⚠️ Champs obligatoires manquants.\");\n    return res.status(400).json({\n      message: \"Tous les champs sont requis.\"\n    });\n  }\n\n  // Configuration du transporteur Nodemailer\n  const transporter = nodemailer.createTransport({\n    service: \"gmail\",\n    auth: {\n      user: process.env.EMAIL,\n      // Ton email Gmail\n      pass: process.env.PASSWORD // Ton mot de passe ou App Password\n    }\n  });\n  const mailOptions = {\n    from: email,\n    to: process.env.EMAIL,\n    // Ton email de réception\n    subject: `📩 Nouveau message de ${firstName} ${lastName}`,\n    text: `Nom: ${firstName} ${lastName}\\nEmail: ${email}\\n\\nMessage:\\n${message}`\n  };\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(`✅ Email envoyé avec succès par ${firstName} ${lastName}`);\n    console.log(\"📬 Détails de l'email envoyé:\", info);\n    res.status(200).json({\n      message: \"Email envoyé avec succès !\",\n      emailInfo: info.response\n    });\n  } catch (error) {\n    console.error(\"❌ Erreur lors de l'envoi de l'email:\", error);\n    res.status(500).json({\n      message: \"Erreur lors de l'envoi de l'email\",\n      error: error.message\n    });\n  }\n});\n\n// Vérification de la connexion MySQL\ndb.getConnection((err, connection) => {\n  if (err) {\n    console.error(\"❌ Erreur lors de la connexion à MySQL :\", err.message);\n    process.exit(1);\n  } else {\n    console.log(\"✅ Connexion à MySQL réussie !\");\n    connection.release();\n  }\n});\n\n// Gérer les erreurs 404\napp.use((req, res) => {\n  console.log(`❌ Route introuvable: ${req.method} ${req.url}`);\n  res.status(404).json({\n    message: \"Route introuvable\"\n  });\n});\n\n// Démarrage du serveur\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","dotenv","cors","bodyParser","nodemailer","db","config","console","log","process","env","EMAIL","PASSWORD","app","use","json","req","res","next","method","url","body","post","firstName","lastName","email","message","status","transporter","createTransport","service","auth","user","pass","mailOptions","from","to","subject","text","info","sendMail","emailInfo","response","error","getConnection","err","connection","exit","release","PORT","listen"],"sources":["/Users/victormarlina/Desktop/passAlternance/src/index.js"],"sourcesContent":["const express = require(\"express\");\r\nconst dotenv = require(\"dotenv\");\r\nconst cors = require(\"cors\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst nodemailer = require(\"nodemailer\");\r\nconst db = require(\"./config/database\");\r\n\r\n\r\ndotenv.config();\r\nconsole.log(\"📌 EMAIL chargé :\", process.env.EMAIL ? \"✅\" : \"❌ Non défini\");\r\nconsole.log(\"📌 PASSWORD chargé :\", process.env.PASSWORD ? \"✅\" : \"❌ Non défini\");\r\n\r\n\r\nconst app = express();\r\n\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n\r\n// 🔍 Middleware de debug pour logguer toutes les requêtes reçues\r\napp.use((req, res, next) => {\r\n  console.log(`📩 Requête reçue: ${req.method} ${req.url} - Body:`, req.body);\r\n  next();\r\n});\r\n\r\n\r\n// Routes API\r\napp.use(\"/api/offers\", require(\"./routes/offers\"));\r\napp.use(\"/api/users\", require(\"./routes/users\"));\r\napp.use(\"/api/experiences\", require(\"./routes/experiences\"));\r\napp.use(\"/api/favorites\", require(\"./routes/favorites\"));\r\napp.use(\"/api/profile\", require(\"./routes/profile\"));\r\n\r\n\r\n// 📧 Route pour envoyer un email\r\napp.post(\"/api/contact\", async (req, res) => {\r\n  const { firstName, lastName, email, message } = req.body;\r\n\r\n\r\n  // Vérification des données reçues\r\n  if (!firstName || !lastName || !email || !message) {\r\n    console.log(\"⚠️ Champs obligatoires manquants.\");\r\n    return res.status(400).json({ message: \"Tous les champs sont requis.\" });\r\n  }\r\n\r\n\r\n  // Configuration du transporteur Nodemailer\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: process.env.EMAIL, // Ton email Gmail\r\n      pass: process.env.PASSWORD, // Ton mot de passe ou App Password\r\n    },\r\n  });\r\n\r\n\r\n  const mailOptions = {\r\n    from: email,\r\n    to: process.env.EMAIL, // Ton email de réception\r\n    subject: `📩 Nouveau message de ${firstName} ${lastName}`,\r\n    text: `Nom: ${firstName} ${lastName}\\nEmail: ${email}\\n\\nMessage:\\n${message}`,\r\n  };\r\n\r\n\r\n  try {\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log(`✅ Email envoyé avec succès par ${firstName} ${lastName}`);\r\n    console.log(\"📬 Détails de l'email envoyé:\", info);\r\n\r\n\r\n    res.status(200).json({\r\n      message: \"Email envoyé avec succès !\",\r\n      emailInfo: info.response\r\n    });\r\n  } catch (error) {\r\n    console.error(\"❌ Erreur lors de l'envoi de l'email:\", error);\r\n    res.status(500).json({\r\n      message: \"Erreur lors de l'envoi de l'email\",\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n\r\n\r\n// Vérification de la connexion MySQL\r\ndb.getConnection((err, connection) => {\r\n  if (err) {\r\n    console.error(\"❌ Erreur lors de la connexion à MySQL :\", err.message);\r\n    process.exit(1);\r\n  } else {\r\n    console.log(\"✅ Connexion à MySQL réussie !\");\r\n    connection.release();\r\n  }\r\n});\r\n\r\n\r\n// Gérer les erreurs 404\r\napp.use((req, res) => {\r\n  console.log(`❌ Route introuvable: ${req.method} ${req.url}`);\r\n  res.status(404).json({ message: \"Route introuvable\" });\r\n});\r\n\r\n\r\n// Démarrage du serveur\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}