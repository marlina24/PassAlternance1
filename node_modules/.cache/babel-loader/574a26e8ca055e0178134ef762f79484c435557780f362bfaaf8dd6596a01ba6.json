{"ast":null,"code":"var _jsxFileName = \"/Users/victormarlina/Desktop/passAlternance/src/pages/DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../components/Sidebar/Sidebar\";\nimport Tabs from \"../components/Tabs/Tabs\";\nimport Offers from \"../components/Offers/Offers\";\nimport \"./DashboardPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DashboardPage() {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"offresPostees\");\n  const [offresPostees, setOffresPostees] = useState([]);\n  const [favoris, setFavoris] = useState([]);\n  const userId = localStorage.getItem(\"userId\");\n  const fetchOffresPostees = async () => {\n    const userId = localStorage.getItem(\"userId\");\n    if (!userId) {\n      console.error(\"🚨 Aucune ID utilisateur trouvée !\");\n      alert(\"Erreur : Vous devez être connecté pour voir vos offres.\");\n      return;\n    }\n    try {\n      console.log(`📥 Chargement des offres de l'utilisateur: ${userId}`);\n      const response = await fetch(`http://localhost:5000/api/offers/user/${userId}`);\n      if (!response.ok) {\n        throw new Error(\"Erreur lors de la récupération des offres postées.\");\n      }\n      const data = await response.json();\n      console.log(\"✅ Offres récupérées :\", data);\n\n      // 🔥 S'assurer que seules les offres postées par cet utilisateur sont affichées\n      setOffresPostees(data.filter(offer => offer.userID == userId));\n    } catch (err) {\n      console.error(\"❌ Erreur :\", err.message);\n    }\n  };\n  const handleDeleteOffer = async offerId => {\n    const token = localStorage.getItem(\"token\");\n    const userId = localStorage.getItem(\"userId\"); // ✅ Récupération de l'ID utilisateur\n\n    console.log(\"🟢 Suppression de l'offre :\", {\n      offerId,\n      userId,\n      token\n    }); // ✅ Debug\n\n    if (!userId) {\n      console.error(\"🚨 Aucune ID utilisateur trouvée !\");\n      alert(\"Erreur : Vous devez être connecté pour supprimer une offre.\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/api/offers/${offerId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}` // ✅ Ajout du token pour l'authentification\n        },\n        body: JSON.stringify({\n          userID: userId\n        }) // ✅ Envoi de l'ID utilisateur dans le body\n      });\n      const responseData = await response.json();\n      console.log(\"🟢 Réponse API :\", responseData); // ✅ Debug API\n\n      if (!response.ok) {\n        console.error(\"🚨 Erreur API :\", responseData);\n        throw new Error(responseData.message || \"Erreur lors de la suppression de l'offre.\");\n      }\n      console.log(\"✅ Offre supprimée avec succès !\");\n\n      // Mise à jour des offres après suppression\n      setOffresPostees(prevOffers => prevOffers.filter(offer => offer.id !== offerId));\n    } catch (err) {\n      console.error(\"❌ Erreur :\", err.message);\n    }\n  };\n  const fetchFavoris = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/favorites/${userId}`);\n      if (!response.ok) throw new Error(\"Erreur lors de la récupération des favoris.\");\n      const data = await response.json();\n      console.log(\"📌 Favoris récupérés :\", data); // Vérification des données récupérées\n\n      setFavoris(data); // ✅ Stocker uniquement les offres favorites\n    } catch (err) {\n      console.error(\"Erreur :\", err.message);\n    }\n  };\n  const addToFavorites = async offerId => {\n    try {\n      console.log(\"📌 Ajout aux favoris :\", {\n        userId,\n        offerId\n      });\n      const response = await fetch(\"http://localhost:5000/api/favorites\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          offerId\n        })\n      });\n      if (!response.ok) throw new Error(\"Erreur lors de l'ajout aux favoris.\");\n      console.log(\"✅ Offre ajoutée aux favoris !\");\n      fetchFavoris(); // Met à jour la liste après ajout ✅\n    } catch (err) {\n      console.error(\"Erreur :\", err.message);\n    }\n  };\n  const removeFromFavorites = async offerId => {\n    try {\n      console.log(`🗑 Suppression de l'offre ${offerId} des favoris de l'utilisateur ${userId}`);\n      const response = await fetch(`http://localhost:3002/api/favorites/${offerId}/${userId}`, {\n        // ✅ Vérifier l'URL ici\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) throw new Error(\"Erreur lors de la suppression des favoris.\");\n      console.log(\"✅ Offre retirée des favoris !\");\n\n      // Mettre à jour la liste des favoris immédiatement\n      setFavoris(prevFavoris => prevFavoris.filter(offer => offer.id !== offerId));\n    } catch (err) {\n      console.error(\"Erreur :\", err.message);\n    }\n  };\n  useEffect(() => {\n    fetchOffresPostees();\n    fetchFavoris();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-page\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        activeTab: activeTab,\n        setActiveTab: setActiveTab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab-content\",\n        children: [activeTab === \"offresPostees\" && /*#__PURE__*/_jsxDEV(Offers, {\n          offers: offresPostees.filter(offer => offer.userID == userId) // ✅ On filtre bien les offres postées par l'utilisateur connecté\n          ,\n          setOffers: setOffresPostees,\n          addToFavorites: addToFavorites,\n          removeFromFavorites: removeFromFavorites,\n          handleDeleteOffer: handleDeleteOffer,\n          fetchFavoris: fetchFavoris,\n          activeTab: activeTab\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), activeTab === \"favoris\" && /*#__PURE__*/_jsxDEV(Offers, {\n          offers: favoris // ✅ Maintenant on affiche UNIQUEMENT les favoris ici\n          ,\n          setOffers: setFavoris,\n          removeFromFavorites: removeFromFavorites,\n          fetchFavoris: fetchFavoris,\n          activeTab: activeTab\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(DashboardPage, \"QSCzn6jELxL1LsVUE4qL0fefXJA=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","Tabs","Offers","jsxDEV","_jsxDEV","DashboardPage","_s","activeTab","setActiveTab","offresPostees","setOffresPostees","favoris","setFavoris","userId","localStorage","getItem","fetchOffresPostees","console","error","alert","log","response","fetch","ok","Error","data","json","filter","offer","userID","err","message","handleDeleteOffer","offerId","token","method","headers","Authorization","body","JSON","stringify","responseData","prevOffers","id","fetchFavoris","addToFavorites","removeFromFavorites","prevFavoris","className","children","fileName","_jsxFileName","lineNumber","columnNumber","offers","setOffers","_c","$RefreshReg$"],"sources":["/Users/victormarlina/Desktop/passAlternance/src/pages/DashboardPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Sidebar from \"../components/Sidebar/Sidebar\";\r\nimport Tabs from \"../components/Tabs/Tabs\";\r\nimport Offers from \"../components/Offers/Offers\";\r\nimport \"./DashboardPage.css\";\r\n\r\nfunction DashboardPage() {\r\n  const [activeTab, setActiveTab] = useState(\"offresPostees\");\r\n  const [offresPostees, setOffresPostees] = useState([]);\r\n  const [favoris, setFavoris] = useState([]);\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  const fetchOffresPostees = async () => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n\r\n    if (!userId) {\r\n      console.error(\"🚨 Aucune ID utilisateur trouvée !\");\r\n      alert(\"Erreur : Vous devez être connecté pour voir vos offres.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(`📥 Chargement des offres de l'utilisateur: ${userId}`);\r\n\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/offers/user/${userId}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Erreur lors de la récupération des offres postées.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"✅ Offres récupérées :\", data);\r\n\r\n      // 🔥 S'assurer que seules les offres postées par cet utilisateur sont affichées\r\n      setOffresPostees(data.filter((offer) => offer.userID == userId));\r\n    } catch (err) {\r\n      console.error(\"❌ Erreur :\", err.message);\r\n    }\r\n  };\r\n\r\n  const handleDeleteOffer = async (offerId) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const userId = localStorage.getItem(\"userId\"); // ✅ Récupération de l'ID utilisateur\r\n\r\n    console.log(\"🟢 Suppression de l'offre :\", { offerId, userId, token }); // ✅ Debug\r\n\r\n    if (!userId) {\r\n      console.error(\"🚨 Aucune ID utilisateur trouvée !\");\r\n      alert(\"Erreur : Vous devez être connecté pour supprimer une offre.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/offers/${offerId}`,\r\n        {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`, // ✅ Ajout du token pour l'authentification\r\n          },\r\n          body: JSON.stringify({ userID: userId }), // ✅ Envoi de l'ID utilisateur dans le body\r\n        }\r\n      );\r\n\r\n      const responseData = await response.json();\r\n      console.log(\"🟢 Réponse API :\", responseData); // ✅ Debug API\r\n\r\n      if (!response.ok) {\r\n        console.error(\"🚨 Erreur API :\", responseData);\r\n        throw new Error(\r\n          responseData.message || \"Erreur lors de la suppression de l'offre.\"\r\n        );\r\n      }\r\n\r\n      console.log(\"✅ Offre supprimée avec succès !\");\r\n\r\n      // Mise à jour des offres après suppression\r\n      setOffresPostees((prevOffers) =>\r\n        prevOffers.filter((offer) => offer.id !== offerId)\r\n      );\r\n    } catch (err) {\r\n      console.error(\"❌ Erreur :\", err.message);\r\n    }\r\n  };\r\n\r\n  const fetchFavoris = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/favorites/${userId}`\r\n      );\r\n      if (!response.ok)\r\n        throw new Error(\"Erreur lors de la récupération des favoris.\");\r\n\r\n      const data = await response.json();\r\n      console.log(\"📌 Favoris récupérés :\", data); // Vérification des données récupérées\r\n\r\n      setFavoris(data); // ✅ Stocker uniquement les offres favorites\r\n    } catch (err) {\r\n      console.error(\"Erreur :\", err.message);\r\n    }\r\n  };\r\n\r\n  const addToFavorites = async (offerId) => {\r\n    try {\r\n      console.log(\"📌 Ajout aux favoris :\", { userId, offerId });\r\n\r\n      const response = await fetch(\"http://localhost:5000/api/favorites\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ userId, offerId }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Erreur lors de l'ajout aux favoris.\");\r\n\r\n      console.log(\"✅ Offre ajoutée aux favoris !\");\r\n\r\n      fetchFavoris(); // Met à jour la liste après ajout ✅\r\n    } catch (err) {\r\n      console.error(\"Erreur :\", err.message);\r\n    }\r\n  };\r\n\r\n  const removeFromFavorites = async (offerId) => {\r\n    try {\r\n      console.log(\r\n        `🗑 Suppression de l'offre ${offerId} des favoris de l'utilisateur ${userId}`\r\n      );\r\n\r\n      const response = await fetch(\r\n        `http://localhost:3002/api/favorites/${offerId}/${userId}`,\r\n        {\r\n          // ✅ Vérifier l'URL ici\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.ok)\r\n        throw new Error(\"Erreur lors de la suppression des favoris.\");\r\n\r\n      console.log(\"✅ Offre retirée des favoris !\");\r\n\r\n      // Mettre à jour la liste des favoris immédiatement\r\n      setFavoris((prevFavoris) =>\r\n        prevFavoris.filter((offer) => offer.id !== offerId)\r\n      );\r\n    } catch (err) {\r\n      console.error(\"Erreur :\", err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOffresPostees();\r\n    fetchFavoris();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dashboard-page\">\r\n      <Sidebar />\r\n      <div className=\"main-content\">\r\n        <Tabs activeTab={activeTab} setActiveTab={setActiveTab} />\r\n        <div className=\"tab-content\">\r\n          {activeTab === \"offresPostees\" && (\r\n            <Offers\r\n              offers={offresPostees.filter((offer) => offer.userID == userId)} // ✅ On filtre bien les offres postées par l'utilisateur connecté\r\n              setOffers={setOffresPostees}\r\n              addToFavorites={addToFavorites}\r\n              removeFromFavorites={removeFromFavorites}\r\n              handleDeleteOffer={handleDeleteOffer}\r\n              fetchFavoris={fetchFavoris}\r\n              activeTab={activeTab}\r\n            />\r\n          )}\r\n\r\n          {activeTab === \"favoris\" && (\r\n            <Offers\r\n              offers={favoris} // ✅ Maintenant on affiche UNIQUEMENT les favoris ici\r\n              setOffers={setFavoris}\r\n              removeFromFavorites={removeFromFavorites}\r\n              fetchFavoris={fetchFavoris}\r\n              activeTab={activeTab}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DashboardPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,+BAA+B;AACnD,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,MAAM,MAAM,6BAA6B;AAChD,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,eAAe,CAAC;EAC3D,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMe,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAE7C,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,MAAMH,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAE7C,IAAI,CAACF,MAAM,EAAE;MACXI,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;MACnDC,KAAK,CAAC,yDAAyD,CAAC;MAChE;IACF;IAEA,IAAI;MACFF,OAAO,CAACG,GAAG,CAAC,8CAA8CP,MAAM,EAAE,CAAC;MAEnE,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAC1B,yCAAyCT,MAAM,EACjD,CAAC;MAED,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;MACvE;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCT,OAAO,CAACG,GAAG,CAAC,uBAAuB,EAAEK,IAAI,CAAC;;MAE1C;MACAf,gBAAgB,CAACe,IAAI,CAACE,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,IAAIhB,MAAM,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZb,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEY,GAAG,CAACC,OAAO,CAAC;IAC1C;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAOC,OAAO,IAAK;IAC3C,MAAMC,KAAK,GAAGpB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMF,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;IAE/CE,OAAO,CAACG,GAAG,CAAC,6BAA6B,EAAE;MAAEa,OAAO;MAAEpB,MAAM;MAAEqB;IAAM,CAAC,CAAC,CAAC,CAAC;;IAExE,IAAI,CAACrB,MAAM,EAAE;MACXI,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;MACnDC,KAAK,CAAC,6DAA6D,CAAC;MACpE;IACF;IAEA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oCAAoCW,OAAO,EAAE,EAC7C;QACEE,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUH,KAAK,EAAE,CAAE;QACpC,CAAC;QACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX,MAAM,EAAEhB;QAAO,CAAC,CAAC,CAAE;MAC5C,CACF,CAAC;MAED,MAAM4B,YAAY,GAAG,MAAMpB,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC1CT,OAAO,CAACG,GAAG,CAAC,kBAAkB,EAAEqB,YAAY,CAAC,CAAC,CAAC;;MAE/C,IAAI,CAACpB,QAAQ,CAACE,EAAE,EAAE;QAChBN,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEuB,YAAY,CAAC;QAC9C,MAAM,IAAIjB,KAAK,CACbiB,YAAY,CAACV,OAAO,IAAI,2CAC1B,CAAC;MACH;MAEAd,OAAO,CAACG,GAAG,CAAC,iCAAiC,CAAC;;MAE9C;MACAV,gBAAgB,CAAEgC,UAAU,IAC1BA,UAAU,CAACf,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACe,EAAE,KAAKV,OAAO,CACnD,CAAC;IACH,CAAC,CAAC,OAAOH,GAAG,EAAE;MACZb,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEY,GAAG,CAACC,OAAO,CAAC;IAC1C;EACF,CAAC;EAED,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uCAAuCT,MAAM,EAC/C,CAAC;MACD,IAAI,CAACQ,QAAQ,CAACE,EAAE,EACd,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;MAEhE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCT,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAEK,IAAI,CAAC,CAAC,CAAC;;MAE7Cb,UAAU,CAACa,IAAI,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZb,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEY,GAAG,CAACC,OAAO,CAAC;IACxC;EACF,CAAC;EAED,MAAMc,cAAc,GAAG,MAAOZ,OAAO,IAAK;IACxC,IAAI;MACFhB,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAE;QAAEP,MAAM;QAAEoB;MAAQ,CAAC,CAAC;MAE1D,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEa,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE3B,MAAM;UAAEoB;QAAQ,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;MAExEP,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;MAE5CwB,YAAY,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOd,GAAG,EAAE;MACZb,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEY,GAAG,CAACC,OAAO,CAAC;IACxC;EACF,CAAC;EAED,MAAMe,mBAAmB,GAAG,MAAOb,OAAO,IAAK;IAC7C,IAAI;MACFhB,OAAO,CAACG,GAAG,CACT,6BAA6Ba,OAAO,iCAAiCpB,MAAM,EAC7E,CAAC;MAED,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uCAAuCW,OAAO,IAAIpB,MAAM,EAAE,EAC1D;QACE;QACAsB,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,IAAI,CAACf,QAAQ,CAACE,EAAE,EACd,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;MAE/DP,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;;MAE5C;MACAR,UAAU,CAAEmC,WAAW,IACrBA,WAAW,CAACpB,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACe,EAAE,KAAKV,OAAO,CACpD,CAAC;IACH,CAAC,CAAC,OAAOH,GAAG,EAAE;MACZb,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEY,GAAG,CAACC,OAAO,CAAC;IACxC;EACF,CAAC;EAEDhC,SAAS,CAAC,MAAM;IACdiB,kBAAkB,CAAC,CAAC;IACpB4B,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACExC,OAAA;IAAK4C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B7C,OAAA,CAACJ,OAAO;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACXjD,OAAA;MAAK4C,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B7C,OAAA,CAACH,IAAI;QAACM,SAAS,EAAEA,SAAU;QAACC,YAAY,EAAEA;MAAa;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1DjD,OAAA;QAAK4C,SAAS,EAAC,aAAa;QAAAC,QAAA,GACzB1C,SAAS,KAAK,eAAe,iBAC5BH,OAAA,CAACF,MAAM;UACLoD,MAAM,EAAE7C,aAAa,CAACkB,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,MAAM,IAAIhB,MAAM,CAAE,CAAC;UAAA;UACjE0C,SAAS,EAAE7C,gBAAiB;UAC5BmC,cAAc,EAAEA,cAAe;UAC/BC,mBAAmB,EAAEA,mBAAoB;UACzCd,iBAAiB,EAAEA,iBAAkB;UACrCY,YAAY,EAAEA,YAAa;UAC3BrC,SAAS,EAAEA;QAAU;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CACF,EAEA9C,SAAS,KAAK,SAAS,iBACtBH,OAAA,CAACF,MAAM;UACLoD,MAAM,EAAE3C,OAAQ,CAAC;UAAA;UACjB4C,SAAS,EAAE3C,UAAW;UACtBkC,mBAAmB,EAAEA,mBAAoB;UACzCF,YAAY,EAAEA,YAAa;UAC3BrC,SAAS,EAAEA;QAAU;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CACF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/C,EAAA,CA5LQD,aAAa;AAAAmD,EAAA,GAAbnD,aAAa;AA8LtB,eAAeA,aAAa;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}